- modules and functions

basic units of an erlang program, modules contain functions.

* modules are where we store code.

-module(blah).     % module declaration
must be the same name as the file.

-export([blah/0]). % export declaration 
Name/N means a function called Name with N arguments.
functions not exported are private to module.

function pattern matching clauses are separated by semi-colons.

head() -> body.

using pattern matching for clauses the order matters, the first
succeeding claus is the one that is mactched.

If we fail to match any clause the program will fail with a runtime
error. This is the way to programm in erlang.

* directories and code paths
pwd().   - prints the current working directory
ls().    - lists the names of the files in cwd.
cd(Dir). - changes to current working directory.

* adding tests to code.
using pattern matching can be used to create effective tests
for erlang functions.

* where to put the semicolons.
commas     - separate arguments to function calls, data constructors,
             and patterns.
semicolons - separate clauses in several contexts: function definition,
             cas, if, try..catch, and receive expressions.
periods    - separate entire functions and expressions in the shell.


* funs: the basic unit of abstraction
since erlang is a functional language, funs can be passed as
arguments, returned from functions and stored as values.

funs can be used to perform the same operation on each element of
a list, to create new control structures, implement things like
 parsing code and parsing combinators.

funs are anonymous functions:
> Double = fun(X) -> 2*X end.

> Hypot = fun(X, Y) -> math:sqrt(X*X + Y*Y) end.

> TempConvert = fun({c,C}) -> {f, 32 + C*9/5};
>                  ({f,F}) -> {c, (F-32)*5/9}
>               end.

** functions that have funs as their arguements
> lists:map(fun(X) -> 2*X end, List).

> Even = fun(X) -> (X rem 2) =:= 0 end.
> lists:map(Even, [1,2,3,4,5,6,8]).
> lists:filter(Even, [1,2,3,4,5,6,8]).

** functions that return funs
> Fruit = [apple,pear,orange].
> MakeTest = fun(L) -> (fun(X) -> lists:member(X, L) end) end. %% wow!
> IsFruit = MakeTest(Fruit).

> lists:filter(IsFruit, [dog,orange,cat,apple,bear]).

%% a function that returns a normal value:
> Double = fun(X) -> ( 2 * X ) end.

%% the thing in the parentheses is the return value:
%% so return a function (that we can apply or return as a value:
> Mult = fun(Times) -> ( fun(X) -> X * Times end ) end.

> fun(X) -> X * 3 end (5). => 15


* simple list processing
- don't forget the base case.
-import(foo, [blah/0]).  % so we don't have to qualify names.

* list comprehensions
- expressions that create lists without have to use funs, maps, filters

> mylists:map(fun(N) -> N*2 end, L).
%or.
> [2*X || X <- L ].

> Buy=[{oranges,4},{newspaper,1},{apples,10},{pears,6},{milk,3}].
> [{Name, 2*Number} || {Name, Number} <- Buy].
%% matching patterns to patterns.
%% tuple on left side is called a 'constructor'.

%% piecemiel construction:

%% list the items in Buy.
> [{I, Q} || {I, Q} <- Buy].

%% replace every item with it's own price:
> [{shop:cost(I), Q} || {I, Q} <- Buy].

%% multiply cost * quantity to produce extended price.
> [shop:cost(I) * Q || {I, Q} <- Buy].

%% now sum the resulting price list to produce total price.
> lists:sum([shop:cost(I) * Q || {I, Q} <- Buy]).

&& as a function:
total(Lst) ->
    lists:sum([shop:cost(I) * Q || {I, Q} <- Lst]).

%% a version of map.
map(F, L) -> [F(X) || X <- L].

%% general form:
[X || Qualifier1, Qualifier2, ...].
  Where qualifiers are generators, bitstring generator, filter:
  1. generator: Pattern <- ListExpr
  2. BitStringPattern <= BitStringExpr
  3. filter: predicates or boolean expressions.
* BIF's
some are implemented in erlang, but most are implemented in the VM.
they provide services that are inefficient or impossible in Erlang.

* guards
preforms simple tests on variable in a pattern.
"when 'some predicate' -> something.
must be free from side effects.
guards can't call user defined functions.

** guard sequence
G1; G2; G3; ...;  is true if one of the guard expressions is true.

** guards
G1, G2, G3, ..., is true if all of the gueard expressions is true.

** examples:
f(X,Y) when is_integer(X), X > Y, Y < 6 -> ...
the comma means 'and'.

is_tuple(T), tuple_size(T) =:= 6, abs(element(3, T)) > 5
element(4, X) =:= hd(L)

X =:= dog; X =:= cat
is_integer(X), X > Y ; abs(Y) < 23
the semicolon means 'or'.

%% short-circuit boolean expressions:
is_atom(L) orelse (is_list(L) andalso lenght(L) > 2)

* case and if expressions
case Expression of
  Pattern1 [when Guard1] -> Expr_seq1;
  Pattern2 [when Guard2] -> Expr_seq2;
  ...
end

if
  Guard1 ->
    Expr_seq1;
  Guard2 ->
    Expr_seq2;
  ...
end

* building lists in natual order
Executing recursive list functions reverses the rebuilt list.
if the order matters call 'lists:reverse/1' on the list.
the compiler will add in a highly optomised version of list.
List ++ [H] is highly inefficient but may be easier to read.

* accumulators
* date and time
erlang:now/0

erlang:date/0

erlang:time/0
